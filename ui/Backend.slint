/*

    Author: Justin
    Description: Backend interface with all callbacks

*/
import { Material } from "../ui/models/MaterialModel.slint";
import { ProjectModel } from "../ui/models/ProjectModel.slint";


export global Backend {
    // Login View
    callback request-login();
    callback request-exit();

    // Project View
    callback request-logout();

    // Project Detail View
    // TODO(jmeusel): id mitgeben
    //// Justin: Bitte ein parameter von dem Material, welches gelöscht werden soll
    // TODO(jmeusel): hier nochmal drüber nachdenken ....
    callback deleteMaterial(Material);

    //ProjektName, Client, ProjectStart, ProjectDeadline, calculated and current -costs
    //List of Materials 
    //all of this needs to be saved
    //// Justin: Bitte noch die Variblen angeben, welche zum speichern von project genutzt werden sollen
    callback save-project-and-used-materials();
    
    
    // Project Management View
    //// Justin: Bitte noch die Variblen angeben, welche zum erstellen von project genutzt werden sollen
    callback create_new_project();

    //// Justin: Bitte noch die Variblen angeben, welche zum erstellen von client genutzt werden sollen
    callback add-new-client();

    //// Justin: Bitte feedback an mich, wofür diese Funktion genutzt wird
            /// Jasha: Um das ClientPopUp anzuzeigen, außerdem gibt es innerhalb des Popups einen Save und einen Cancel button
            /// Zudem weiß ich nicht ob das eine public pure function sein muss. Ich weiß nicht wie du das routing implementierst aber wir haben
            /// quasi einen visible boolean innerhalb des popups, deswegen dachte ich man müsse das so wie heir schreiben
    public pure function showAddNewClientPopUp () -> bool {
        // TODO(jmeusel): boolean switchen
        // TODO(jmeusel): funktion muss gleichzeitig die Project-Overvierw unsichtbar machen
        return true;
    }

    /// Jasha: Um das AddMaterialPopUp anzuzeigen, außerdem gibt es innerhalb des Popups einen Save und einen Cancel button
    public pure function showAddNewMaterialPopUp () -> bool {
        // TODO(jmeusel): boolean switchen
        // TODO(jmeusel): funktion muss gleichzeitig die Warehouse-overview unsichtbar machen
        return true;
    }


    // AppBar
    //sollte immer zur vorherigen page navigieren, da der callback ausschließlich in der Section selbst aufgerufen wird
    callback goBack();


    // LagerOverview
    //name price type amount rememberWhen description
    //// Justin: Bitte noch die Variblen angeben, in welche das Material gespeichert ist
    callback save-materials();

    // müsste diese zusätzlich zu der MaterialList hinzufügen
    //// Justin: Bitte noch die Variblen angeben, in welche das Material hinzugefügt werden soll
    callback add-material();



    // NAVIGATION:
    callback route-to-project-management();

    callback route-to-warehouse-management();

    // TODO(jmeusel): nochmal überlegen, kommt hier nh ID rein oder wird ein Projekt angegeben?
    // Das Projekt welches angeclicked wurde muss mitgegeben werden
    //// Justin: Bitte noch die Variblen angeben, in welche ich das projekt uebergeben muss
    callback route-to-project-i(int);

    callback route-to-LagerOverview();
    

    // TODO(jmeusel): Suche???????? aulagern jewails für kontent oder kann man das anders regeln?
    //// Justin: Mach eine function die mir einfach den inhalt des searchfeldes via parameter übergibt
    ////         jeweils für project und material



    // Variables:
//ProjectView 
    in-out property <[ProjectModel]> recentProjects;
    in-out property <[Material]> materialAlerts;

//ProjectManagement
    in-out property <[ProjectModel]> allProjects;


//ProjectDetailView
    in-out property <ProjectModel> project;

//LagerOverview
    in-out property <[Material]> materials;


//ClientPopUp
    in-out property <bool> showClientPopUp;

//MaterialPopUp
    in-out property <bool> showMaterialPopUp;

}