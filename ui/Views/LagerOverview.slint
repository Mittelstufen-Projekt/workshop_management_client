import { WMSAppbar } from "../Widgets/WMSAppbar.slint";
import { VerticalBox, HorizontalBox, GridBox, Slider } from "std-widgets.slint";
import { ToggleSwitch } from "../Widgets/ToggleSwitch.slint";
import { TextField } from "../Widgets/TextField.slint";
import { CheckBox } from "../Widgets/CheckBox.slint";
import { Button } from "../Widgets/Button.slint";
import { Palette } from "../Palette.slint";
import { LagerText } from "../Widgets/LagerText.slint";
import { LagerRow } from "../Widgets/Lager/LagerRow.slint";
import { Material } from "../models/MaterialModel.slint";
import { Constants } from "../Constants.slint";
import { Backend } from "../Backend.slint";


// TODO(jmeusel): Material Count sollte Rot angezeigt werden falls der Wert unterschritten wird
export component LagerOverview inherits VerticalBox {

    in-out property <[Material]> materials;

    property <length> topPadding: 20px;


    
    alignment: start;
    WMSAppbar {
        title: Constants.warehouse_overview;
        buttonTitleFirst: "Add Material";
        onFirstButtonPressed => {
            Backend.add-material();
        }

    }
    Rectangle {
        height: 80px;
    }
    
    HorizontalBox {
    
            alignment: LayoutAlignment.start;
            LagerText {label: "name";}
            Rectangle {width: 265px;}
            LagerText {label: "price";}
            Rectangle {width: 185px;}
            LagerText {label: "type";}
            Rectangle {width: 190px;}
            LagerText {label: "amount";}
            Rectangle {width: 150px;}
            LagerText {label: "remember when";}
            Rectangle {width: 35px;}
            LagerText {label: "description";}
        }        
        for material[i] in materials: LagerRow {
            name: materials[i].name;
            price: materials[i].price;
            // TODO(jmeusel): type is falsch, sollte dropdown sein..? Oder? oder vielleicht doch n string? Und alle strings(Types), 
            // werden dann in nh liste geworden? not sure
            type: materials[i].type;
            amount: materials[i].quantity;
            // TODO(jmeusel): was einfallen lassen.... muss wahrscheinlich im FE gehalten werden
            rememberWhen: "never";
            description: materials[i].description;
            clicked => {
                // TODO(jmeusel): BE - Function Delete Material[i]
            }
        }

    HorizontalBox {
        //alignment: space-between;
        Button {text: Constants.save;
        clicked => {
            Backend.save-materials(
                
            );
        }
        width: root.width * 0.04;
        height: root.height * 0.04;
    }
    //Rectangle {width: 200px;}
    Button {text: Constants.cancel;
        clicked => {
            // TODO(jmeusel): BE - Function Keine Daten Speichern und Ã¤nderungen verwerfen
        }
        width: root.width * 0.04;
        height: root.height * 0.04;
    }
    }
}


/*
HorizontalBox {
        alignment: space-between;
        HorizontalBox {
            LagerText {
                label: "name";
            }
        }

        LagerText {
            label: "price";
        }

        LagerText {
            label: "type";
        }

        LagerText {
            label: "amount";
        }

        // TODO(jmeusel): DateTime? 
        LagerText {
            label: "rememberWhen";
        }

        LagerText {
            label: "description";
        }
    }

    LagerRow { }
*/

